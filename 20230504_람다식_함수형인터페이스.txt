람다식을 쓰려면 인터페이스 추상메서드 1개
@FunctionalInterface
추상메서드 하나라는 표시,
//생략가능하지만 안정성을위해 붙여준다. 메서드 1개라는 표시, 람다식 사용할때

인터페이스는 한 파일에 한개만 존재하게 해야한다.
인터페이스 추상메서드 하나만 존재 -> 람다식 사용가능


함수형 Interface
java.util.function 패키지안에 자주쓰이는 메서드를 정의해 놓았기 때문에
인터페이스를 정의하지 않아도 함수호출 가능

Function<T(매개변수), R(반환타입)> // 1개의 매개변수, 반환타입 있음
-apply() 사용해서 반환해준다.

BiFunction<T(매개변수), U(매개변수), R(반환타입> // 2개의 매개변수, 반환타입 있음
-apply( ) 사용해서 반환해준다.

Consumer<T(매개변수)> // 1개의 매개변수, 반환타입 없음
-accept() 사용해서 반환해준다.

BiConsumer<T(매개변수), U(매개변수)> // 2개의 매개변수, 반환타입 없음
-accept() 사용해서 반환해준다.

Predicate<T(매개변수)> // 1개의 매개변수, 반환타입은 boolean , 조건식표현에 사용
-test() 사용해서 반환해준다

BiPredicate<T(매개변수), U(매개변수)> // 2개의 매개변수, 반환타입은 boolean , 조건식표현에 사용
-test() 사용해서 반환해준다

Supplier<R(반환타입> // 매개변수 없고 반환타입만 있음
- get() 사용해서 반환해준다.