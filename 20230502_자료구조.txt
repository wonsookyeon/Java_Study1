<자료구조>

★Array List- 데이터의 저장순서 유지, 중복허용, 가장 간단, 사용하기 쉬움, 접근시간이 가장 빠름 
순차적으로 추가.삭제할경우 O ->  순차적으로 추가,삭제는 마지막 데이터부터 역순으로 진행되기 때문에 재배치가 필요없기에 속도가 빠르다.
중간데이터를 추가.삭제 할 경우 X -> 각 요소들을 재배치하여 공간을 확보하거나 채워야하기때문에 처리속도 느림.

Linked List- 데이터의 저장순서 유지, 중복허용 /
중간 데이터를 추가.삭제하는 경우 O -> 각 요소간의 연결만 변경해주면 되기때문에 처리속도 빠름
                

해시 키 (Hash Key)는 해시함수(Hash Function) 에 의해 생성된 데이터의 고유한 식별자이다.
해시함수는 임의의 크기의 데이터를 고정된 크기의 데이터로 매핑하는 함수이며,
이때 매핑된 결과값을 해시 값(Hash Value)이라고 한다.

해시함수를 사용하여 데이터를 저장하면, 데이터 검색 및 삽입 작업에서 빠른 성능을 보장 할 수 있다.
이는 해시함수가 일반적으로 매우빠르게 연산 가능하기 떄문.
또한, 같은 입력에 대해서는 항상 같은 해시값이 반환되기 때문에,
데이터를 검색하거나 수정할 때 키 값을 이용하여 빠르게 접근할 수 있다.

예를 들어 해시테이블(Hash Table) 은 키-값(Key-Value) 쌍으로 데이터를 저장하는 자료구조이다.
해시키는 입력된 데이터의 고유한 식별자 역할을 하며, 해시함수를 사용하여 해시 값으로 변환된 후,
해당 값을 인덱스로 사용하여 데이터를 저장함.
따라서 해시 키를 이용하여 데이터를 빠르게 검색하거나 삽입할 수 있다.



Stack(스택) 
Lsat In - First Out (LIFO) 구조로 이루어져 있음

Queue(큐)
First In - First Out (FIFO) 구조로 이루어져 있음


단방향방식 A -> B  ex) 라디오, 티비 전파
반이중방식 양쪽 가능, 동시에 X  ex) 무전기, 철길
전이중방식 양쪽 가능, 동시에 O ex) 전화